---
# vim:sw=2:ft=ansible
- name: Ensure sentry user exists
  user: name={{sentry_user}}

- name: Ensure sentry directories exists
  file: state=directory path={{sentry_home}} owner={{sentry_user}}

- name: Ensure sentry static dir exists
  file: state=directory path={{sentry_home}}/_static owner={{sentry_user}}

# Try to create virtualenv only if it doesn't exist.
# This way we can re-run the playbook without errors.
- name: Check existince of Sentry virtualenv
  stat: path={{sentry_home}}/env
  register: sentry_has_virtualenv
  become_user: "{{sentry_user}}"

- name: Create virtualenv for Sentry using chosen Python
  when: sentry_has_virtualenv.stat.exists == False
  shell: virtualenv --python={{sentry_python}} {{sentry_home}}/env
  become_user: "{{sentry_user}}"

- name: Install Sentry
  shell: "{{sentry_home}}/env/bin/pip install sentry=={{sentry_version}}"
  become_user: "{{sentry_user}}"

- name: Install requirements for Redis
  pip: name={{item}} executable={{sentry_home}}/env/bin/pip
  with_items:
    - redis
    - hiredis
    - nydus
    - django-redis-cache
  become_user: "{{sentry_user}}"
  when: redis_enabled

- name: Install requirements for MySQL
  pip: name=mysql-python executable={{ sentry_home }}/env/bin/pip
  when: "'mysql' in sentry_db_engine|lower()"

- name: Install requirements for Postgresql
  pip: name=psycopg2 executable={{ sentry_home }}/env/bin/pip
  when: "'psycopg2' in sentry_db_engine|lower()"

- name: Install extensions
  pip: name={{item}} executable={{sentry_home}}/env/bin/pip
  with_items: sentry_extensions

- name: Prepare Sentry
  template: src=sentry.j2 dest={{sentry_home}}/sentry owner={{sentry_user}} mode=0755

- include: services.deb.yml
  when: ansible_os_family == 'Debian'

- include: services.red.yml
  when: ansible_os_family == 'RedHat'

- name: Configure Sentry
  template: src=config.py.j2 dest={{sentry_home}}/config.py owner={{sentry_user}}
  register: config
  notify: [sentry restart]
  tags: sentry-config

- name: Configure Sentry (8.0 YAML)
  template: src=config.yml.j2 dest={{sentry_home}}/config.yml owner={{sentry_user}}
  notify: [sentry restart]
  tags: sentry-config

- file: state=directory path={{sentry_home}} owner={{sentry_user}} recurse=yes

- name: Upgrade sentry
  shell: "{{sentry_bin}}/sentry --config {{ sentry_home }}/config.py upgrade --noinput"
  register: sentry_upgrade
  changed_when: sentry_upgrade.rc
  become_user: "{{sentry_user}}"
  tags: sentry-upgrade

- name: Collect sentry static files
  shell: "{{sentry_bin}}/sentry --config {{ sentry_home }}/config.py django collectstatic --noinput"
  register: sentry_collected
  changed_when: not sentry_collected.stderr.startswith('\n0 static files copied')
  become_user: "{{sentry_user}}"

#- name: Setup initial data
#  template: src=setup.py.j2 dest={{sentry_home}}/setup.py owner={{sentry_user}} mode=0755
#  register: setup

# Not compatible with the latest Sentry - setup data manually through web
 # - shell: true env/bin/python setup.py
 # chdir={{sentry_home}}
#- shell: "echo foobar"
#  when: setup.changed
#  become_user: "{{sentry_user}}"

# 8.0+ way to create users
# - name: Setup superuser
#  command: "{{ sentry_bin }}/sentry --config config.py createuser --superuser --email {{sentry_admin_email}} --password #{{sentry_admin_password}} chdir={{sentry_home}}"
 # ignore_errors: yes  # Raises error on second run when user exists
#  tags: sentry-config

- name: Configure Nginx
  template: src=nginx.conf.j2 dest={{nginx_dir|default('/etc/nginx')}}/sites-enabled/sentry.conf
  notify: [nginx reload]
  when: nginx_enabled

- name: Ensure Sentry is started
  service: name={{item}} state=started
  with_items:
  - sentry-web
  - sentry-worker
